#!/bin/bash

# Comments here

source ./vars &> /dev/null

# Create the VPC
aws ec2 create-vpc --cidr-block $CIDR

# Grab the VPC ID so we can assign a tag to it.
while [ -z "$VPC_ID" ]; do
    VPC_ID=$(aws ec2 describe-vpcs \
    --query Vpcs[].VpcId[] \
    --filters Name=cidr,Values=$CIDR \
    --output text)
done

aws ec2 create-tags \
--resources $VPC_ID \
--tags Key=Name,Value=$VPC_NAME

# Create the subnets
aws ec2 create-subnet \
--vpc-id $VPC_ID \
--cidr-block $SUBNET_CIDR_1 \
--availability-zone $AZ_1

aws ec2 create-subnet \
--vpc-id $VPC_ID \
--cidr-block $SUBNET_CIDR_2 \
--availability-zone $AZ_2

aws ec2 create-subnet \
--vpc-id $VPC_ID \
--cidr-block $SUBNET_CIDR_3 \
--availability-zone $AZ_3

aws ec2 create-subnet \
--vpc-id $VPC_ID \
--cidr-block $SUBNET_CIDR_4 \
--availability-zone $AZ_1

aws ec2 create-subnet \
--vpc-id $VPC_ID \
--cidr-block $SUBNET_CIDR_5 \
--availability-zone $AZ_2

aws ec2 create-subnet \
--vpc-id $VPC_ID \
--cidr-block $SUBNET_CIDR_6 \
--availability-zone $AZ_3

# Grab the subnet ID so we can assign tags to it.
while [ -z "$SUBNET_ID_1" ]; do
    SUBNET_ID_1=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_1 \
    --output text)
done

while [ -z "$SUBNET_ID_2" ]; do
    SUBNET_ID_2=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_2 \
    --output text)
done

while [ -z "$SUBNET_ID_3" ]; do
    SUBNET_ID_3=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_3 \
    --output text)
done

while [ -z "$SUBNET_ID_4" ]; do
    SUBNET_ID_4=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_4 \
    --output text)
done

while [ -z "$SUBNET_ID_5" ]; do
    SUBNET_ID_5=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_5 \
    --output text)
done

while [ -z "$SUBNET_ID_6" ]; do
    SUBNET_ID_6=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_6 \
    --output text)
done

# Tag the Private subnets
aws ec2 create-tags \
--resources $SUBNET_ID_1 \
--tags Key=Name,Value=$SUBNET_TAG_1

aws ec2 create-tags \
--resources $SUBNET_ID_2 \
--tags Key=Name,Value=$SUBNET_TAG_2

aws ec2 create-tags \
--resources $SUBNET_ID_3 \
--tags Key=Name,Value=$SUBNET_TAG_3

# Tag and map Public IP to Public subnets
aws ec2 create-tags \
--resources $SUBNET_ID_4 \
--tags Key=Name,Value=$SUBNET_TAG_4

aws ec2 modify-subnet-attribute \
--subnet-id $SUBNET_ID_4 \
--map-public-ip-on-launch

aws ec2 create-tags \
--resources $SUBNET_ID_5 \
--tags Key=Name,Value=$SUBNET_TAG_5

aws ec2 modify-subnet-attribute \
--subnet-id $SUBNET_ID_5 \
--map-public-ip-on-launch

aws ec2 create-tags \
--resources $SUBNET_ID_6 \
--tags Key=Name,Value=$SUBNET_TAG_6

aws ec2 modify-subnet-attribute \
--subnet-id $SUBNET_ID_6 \
--map-public-ip-on-launch

while [ -z "$IG_ID" ]; do
    IG_ID=$(aws ec2 create-internet-gateway  \
    | grep InternetGatewayId \
    | awk -F ':' '{print $2}' \
    | tr -d '"' \
    | tr -d ',' \
    | tr -d ' ')
done

aws ec2 describe-internet-gateways  | grep $IG_ID

aws ec2 create-tags \
--resources $IG_ID \
--tags Key=Name,Value=$IG_TAG

aws ec2 attach-internet-gateway \
--internet-gateway-id $IG_ID \
--vpc-id $VPC_ID

while [ -z "$ROUTE_TABLE_ID" ]; do
    ROUTE_TABLE_ID=$(aws ec2 describe-route-tables \
    --query RouteTables[].RouteTableId \
    --filters Name=route.destination-cidr-block,Values=$CIDR \
    --output text)
done

aws ec2 create-route \
--route-table-id $ROUTE_TABLE_ID \
--destination-cidr-block 0.0.0.0/0 \
--gateway-id $IG_ID

aws ec2 associate-route-table \
--route-table-id $ROUTE_TABLE_ID \
--subnet-id $SUBNET_ID_4

aws ec2 associate-route-table \
--route-table-id $ROUTE_TABLE_ID \
--subnet-id $SUBNET_ID_5

aws ec2 associate-route-table \
--route-table-id $ROUTE_TABLE_ID \
--subnet-id $SUBNET_ID_6

# Create EIP for Nat
NAT_EIP=$(aws ec2 allocate-address --domain vpc --output text | awk '{ print $1 }')

# Create NAT Gateway
aws ec2 create-nat-gateway \
--subnet-id $SUBNET_ID_5 \
--allocation-id $NAT_EIP

# Create Route table for Private
PRIVATE_TABLE=$(aws ec2 create-route-table --vpc-id $VPC_ID | grep RouteTableId | awk -F':' '{print $2}' | sed 's/"//g' | sed 's/ //' | sed 's/,//')

# Look up NAT Gatway ID
while [ -z "$NAT_ID" ]; do
    NAT_ID=$(aws ec2 describe-nat-gateways\
    --filter Name=vpc-id,Values=$VPC_ID \
    | grep NatGatewayId | awk -F':' {'print $2}'\
    | sed 's/"//g' | sed 's/ //' | sed 's/,//')
done

# Wait until available
while [ "$NAT_STATE" != "available" ]; do
    NAT_STATE=$(aws ec2 describe-nat-gateways \
    --filter Name=vpc-id,Values=$VPC_ID  \
    --filter Name=nat-gateway-id,Values=$NAT_ID \
    --query NatGateways[].State \
    --output text)
done

# Associate Nat and Private subnets
aws ec2 create-route \
--route-table-id $PRIVATE_TABLE \
--destination-cidr-block 0.0.0.0/0 \
--nat-gateway-id $NAT_ID

aws ec2 associate-route-table \
--route-table-id $PRIVATE_TABLE \
--subnet-id $SUBNET_ID_1

aws ec2 associate-route-table \
--route-table-id $PRIVATE_TABLE \
--subnet-id $SUBNET_ID_2

aws ec2 associate-route-table \
--route-table-id $PRIVATE_TABLE \
--subnet-id $SUBNET_ID_3

# Enable DNS hostname
aws ec2 modify-vpc-attribute \
--vpc-id $VPC_ID \
--enable-dns-hostnames
