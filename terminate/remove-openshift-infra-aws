#!/bin/bash

# Source Variables
source ../vars &> /dev/null

DELETE_KEYS() {
##
#
#
# DELETE KEY PAIRS
#
#
###

aws ec2 delete-key-pair --key-name=${KEY_NAME}
echo "deleting keys"
}


DELETE_IAM_ROLES() {
###
#
#
# DELETE IAM ROLES
#
#
###

aws iam delete-user-policy --user-name=$IAM_POLICY_NAME --policy=$EBS_POLICY_NAME
aws iam delete-role --role-name=$IAM_ROLE_NAME
echo "deleted IAM roles"
}


DELETE_INSTANCES() {
###
#
#
# DELETE INSTANCES and EIP
#
#
###

BASTION=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId]' --filters Name=instance-state-name,Values=running --filters Name=instance.group-name,Values=$BASTION_SEC_GROUP --output text)

MASTER0=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId]' --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=${UNIQ_VAR}-master00.*" --output text)
MASTER1=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId]' --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=${UNIQ_VAR}-master01.*" --output text)
MASTER2=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId]' --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=${UNIQ_VAR}-master02.*" --output text)
NODE0=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId]' --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=${UNIQ_VAR}-node00.*" --output text)
NODE1=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId]' --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=${UNIQ_VAR}-node01.*" --output text)
APPNODE0=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId]' --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=${UNIQ_VAR}-app-node00.*" --output text)
APPNODE1=$(aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId]' --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=${UNIQ_VAR}-app-node01.*" --output text)

for INSTANCES in $BASTION $MASTER0 $MASTER1 $MASTER2 $NODE0 $NODE1 $APPNODE0 $APPNODE1; 
    do aws ec2 terminate-instances --instance-ids $INSTANCES
done
sleep 40

echo "deleted instances"
}


DELETE_LB() {
###
#
#
# DELETE LOAD BALANCERS
#
#
###

aws elb delete-load-balancer --load-balancer-name $MASTER_LB_NAME
aws elb delete-load-balancer --load-balancer-name $INTERNAL_MASTER_LB_NAME
aws elb delete-load-balancer --load-balancer-name $ROUTER_LB_NAME
echo "deleted load balancer"
}

DELETE_SEC_GRPS() {
###
#
#
# DELETE SECURITY GROUPS
#
#
###

sleep 45

VPC_ID=$(aws ec2 describe-vpcs --query Vpcs[].VpcId[] --filters Name=cidr,Values=$CIDR --output text)

NODE_SEC_GRP_ID=$(aws ec2 describe-security-groups --query SecurityGroups[].GroupId[] --filters Name=group-name,Values="$NODES_SEC_GROUP" --output text)
APP_NODES_SEC_GRP_ID=$(aws ec2 describe-security-groups --query SecurityGroups[].GroupId[] --filters Name=group-name,Values="$APP_NODES_SEC_GROUP" --output text)
ROUTER_ELB_SEC_GRP_ID=$(aws ec2 describe-security-groups --query SecurityGroups[].GroupId[] --filters Name=group-name,Values="$ROUTER_ELB_SEC_GRP" --output text)
MASTER_SEC_GRP_ID=$(aws ec2 describe-security-groups --query SecurityGroups[].GroupId[] --filters Name=group-name,Values=$MASTERS_SEC_GROUP --output text)
INTERNAL_MASTER_ELB_SEC_GRP_ID=$(aws ec2 describe-security-groups --query SecurityGroups[].GroupId[] --filters Name=group-name,Values="$INTERNAL_MASTER_ELB_SEC_GRP" --output text)
MASTER_ELB_SEC_GRP_ID=$(aws ec2 describe-security-groups --query SecurityGroups[].GroupId[] --filters Name=group-name,Values="$MASTER_ELB_SEC_GRP" --output text)
BASTION_SEC_GRP_ID=$(aws ec2 describe-security-groups --query SecurityGroups[].GroupId[] --filters Name=group-name,Values="$BASTION_SEC_GROUP" --output text)
VPC_DEFAULT_SEC_GRP_ID=$(aws ec2 describe-security-groups --query SecurityGroups[].GroupId[] --filters Name=vpc-id,Values=$VPC_ID --output text)

for SECURITY_GROUPS in $NODE_SEC_GRP_ID $ROUTER_ELB_SEC_GRP_ID $REG_ELB_SEC_GRP_ID $APP_NODES_SEC_GRP_ID $MASTER_SEC_GRP_ID $BASTION_SEC_GRP_ID $MASTER_ELB_SEC_GRP_ID $INTERNAL_MASTER_ELB_SEC_GRP_ID; do
    aws ec2 delete-security-group --group-id $SECURITY_GROUPS && sleep 5
done
echo "deleted security groups"
}

DELETE_DNS() {
###
#
#
# DELETE DNS
#
#
###

# get infrastructure dns zone id
HOSTED_ZONE=$(aws route53 list-hosted-zones-by-name --dns-name=$INFRA_DNS --max-items=1 --output text | grep $INFRA_DNS | awk '/HOSTED/ { print $3 }')
# get reverse dns zone id
REV_HOSTED_ZONE=$(aws route53 list-hosted-zones-by-name --dns-name=$DNS_PTR --max-items=1 --output text | grep $DNS_PTR | awk '/HOSTED/ { print $3 }')

# Delete application records
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../app-nodes/app-node/node00-a-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../app-nodes/app-node/node01-a-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $REV_HOSTED_ZONE --change-batch file://../app-nodes/app-node/node00-ptr-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $REV_HOSTED_ZONE --change-batch file://../app-nodes/app-node/node01-ptr-record-terminate.json

# Delete bastion nodes
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../bastion/bastion/bastion-resource-record-terminate.json

# Delete master nodes
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../master/master/master00-a-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $REV_HOSTED_ZONE --change-batch file://../master/master/master00-ptr-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../master/master/master01-a-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $REV_HOSTED_ZONE --change-batch file://../master/master/master01-ptr-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../master/master/master02-a-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $REV_HOSTED_ZONE --change-batch file://../master/master/master02-ptr-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../master/master/master-elb-a-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../master/master/internal-master-elb-a-record-terminate.json

# Delete infrastructure nodes
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../infra-nodes/node/node00-a-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $REV_HOSTED_ZONE --change-batch file://../infra-nodes/node/node00-ptr-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../infra-nodes/node/node01-a-record-terminate.json
aws route53 change-resource-record-sets --hosted-zone-id $REV_HOSTED_ZONE --change-batch file://../infra-nodes/node/node01-ptr-record-terminate.json

# Delete router elb record
aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE --change-batch file://../router-elb/router-elb-a-record-terminate.json


# Delete hosted zones

aws route53 delete-hosted-zone --id $HOSTED_ZONE
aws route53 delete-hosted-zone --id $REV_HOSTED_ZONE
echo "deleted dns"
}

DELETE_VPC() {
###
#
#
# DELETE VPC
#
#
###
VPC_ID=$(aws ec2 describe-vpcs --query Vpcs[].VpcId[] --filters Name=cidr,Values=$CIDR --output text)

while [ -z "$NAT_ID" ]; do
    NAT_ID=$(aws ec2 describe-nat-gateways\
    --filter Name=vpc-id,Values=$VPC_ID \
    | grep NatGatewayId | awk -F':' '{print $2}'\
    | sed 's/"//g' | sed 's/ //' | sed 's/,//')
done

aws ec2 delete-nat-gateway --nat-gateway-id $NAT_ID

# Wait until available
while [ "$NAT_STATE" != "deleted" ]; do
    NAT_STATE=$(aws ec2 describe-nat-gateways \
    --filter Name=vpc-id,Values=$VPC_ID  \
    --filter Name=nat-gateway-id,Values=$NAT_ID \
    --query NatGateways[].State \
    --output text)
done

echo "Waiting for release of EIP"
sleep 15

DEL_EIP1=$(aws ec2 describe-addresses --output text | grep -v eni | awk '{print $2}' | head -1)
DEL_EIP2=$(aws ec2 describe-addresses --output text | grep -v eni | awk '{print $2}' | tail -1)

aws ec2 release-address --allocation-id $DEL_EIP1
aws ec2 release-address --allocation-id $DEL_EIP2

# Grab the subnet ID so we can assign tags to it.
while [ -z "$SUBNET_ID_1" ]; do
    SUBNET_ID_1=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_1 \
    --output text)
done

while [ -z "$SUBNET_ID_2" ]; do
    SUBNET_ID_2=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_2 \
    --output text)
done

while [ -z "$SUBNET_ID_3" ]; do
    SUBNET_ID_3=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_3 \
    --output text)
done

while [ -z "$SUBNET_ID_4" ]; do
    SUBNET_ID_4=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_4 \
    --output text)
done

while [ -z "$SUBNET_ID_5" ]; do
    SUBNET_ID_5=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_5 \
    --output text)
done

while [ -z "$SUBNET_ID_6" ]; do
    SUBNET_ID_6=$(aws ec2 describe-subnets \
    --query Subnets[].SubnetId[] \
    --filters Name=cidr,Values=$SUBNET_CIDR_6 \
    --output text)
done

sleep 60

aws ec2 delete-subnet --subnet-id $SUBNET_ID_1
aws ec2 delete-subnet --subnet-id $SUBNET_ID_2
aws ec2 delete-subnet --subnet-id $SUBNET_ID_3
aws ec2 delete-subnet --subnet-id $SUBNET_ID_4
aws ec2 delete-subnet --subnet-id $SUBNET_ID_5
aws ec2 delete-subnet --subnet-id $SUBNET_ID_6

#ROUTE_TABLE_ID=$(aws ec2 describe-route-tables \
#--query RouteTables[].RouteTableId \
#--filters Name=route.destination-cidr-block,Values=$CIDR \
#--output text)

DEL_IG=$(aws ec2 describe-internet-gateways --query 'InternetGateways[]' --filters "Name=tag:Name,Values=$IG_TAG" --output text | grep igw)

aws ec2 detach-internet-gateway --internet-gateway-id $DEL_IG --vpc-id $VPC_ID
aws ec2 delete-internet-gateway --internet-gateway-id $DEL_IG

ROUTE_TABLE=$(aws ec2 describe-route-tables --filters Name=vpc-id,Values=$VPC_ID --filters Name=route.nat-gateway-id,Values=$NAT_ID --query 'RouteTables[].RouteTableId[]' --output text)

aws ec2 delete-route-table --route-table-id $ROUTE_TABLE

sleep 15

aws ec2 delete-vpc --vpc-id $VPC_ID
echo "deleted vpc"

}

CLEAN_IAM() {
POL_ARN=$(cat /home/rcook/git/ose-on-aws/awscli/iam/pol_arn)
#aws iam delete-instance-profile --instance-profile-name $INSTANCE_PROFILE
aws iam detach-role-policy --role-name $IAM_ROLE_NAME --policy-arn $POL_ARN
aws iam remove-role-from-instance-profile --instance-profile-name $INSTANCE_PROFILE --role-name $IAM_ROLE_NAME
aws iam delete-role --role-name $IAM_ROLE_NAME
aws iam delete-policy --policy-arn $POL_ARN
aws iam delete-user --user-name $S3_USERNAME
echo "deleted IAM roles"
}

# Call functions
#DELETE_IAM_ROLES
CLEAN_IAM
DELETE_INSTANCES
DELETE_KEYS
DELETE_LB
DELETE_SEC_GRPS
DELETE_DNS
DELETE_VPC
