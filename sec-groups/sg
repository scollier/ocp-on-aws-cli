#!/bin/bash

# Comments here

source ./vars &> /dev/null

VPC_ID=$(aws ec2 describe-vpcs \
--query Vpcs[].VpcId[] \
--filters Name=cidr,Values=$CIDR \
--output text)

# Create the master ELB security group
aws ec2 create-security-group \
--group-name $MASTER_ELB_SEC_GRP \
--description "Security Group for OpenShift Master ELB" \
--vpc-id $VPC_ID

MASTER_ELB_SEC_GRP_ID=$(aws ec2 describe-security-groups \
--query SecurityGroups[].GroupId[] \
--filters Name=group-name,Values="$MASTER_ELB_SEC_GRP" \
--output text)

aws ec2 create-tags \
--resources $MASTER_ELB_SEC_GRP_ID \
--tags Key=Name,Value=$MASTER_ELB_SEC_GRP

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_ELB_SEC_GRP_ID \
--protocol tcp \
--port 8443 \
--cidr 0.0.0.0/0

# Create the bastion security group
aws ec2 create-security-group \
--group-name $BASTION_SEC_GROUP \
--description "Security Group for OpenShift Bastion" \
--vpc-id $VPC_ID

BASTION_SEC_GRP_ID=$(aws ec2 describe-security-groups \
--query SecurityGroups[].GroupId[] \
--filters Name=group-name,Values="$BASTION_SEC_GROUP" \
--output text)

aws ec2 create-tags \
--resources $BASTION_SEC_GRP_ID \
--tags Key=Name,Value=$BASTION_SEC_GROUP

aws ec2 authorize-security-group-ingress \
--group-id $BASTION_SEC_GRP_ID \
--protocol tcp \
--port 22 \
--cidr 0.0.0.0/0

# Create the master security group
aws ec2 create-security-group \
--group-name $MASTERS_SEC_GROUP \
--description "Security Group for OpenShift Master" \
--vpc-id $VPC_ID

MASTER_SEC_GRP_ID=$(aws ec2 describe-security-groups \
--query SecurityGroups[].GroupId[] \
--filters Name=group-name,Values=$MASTERS_SEC_GROUP \
--output text)

aws ec2 create-tags \
--resources $MASTER_SEC_GRP_ID \
--tags Key=Name,Value=$MASTERS_SEC_GROUP

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 22 \
--source-group $BASTION_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 8443 \
--source-group $MASTER_ELB_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 53 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol udp \
--port 53 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 8443 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 8444 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 8053 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol udp \
--port 8053 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 4789 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 2379 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 10255 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol udp \
--port 10255 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 9090 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 2380 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol udp \
--port 5404 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol udp \
--port 5405 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 2224 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol tcp \
--port 24224 \
--cidr $CIDR

aws ec2 authorize-security-group-ingress \
--group-id $MASTER_SEC_GRP_ID \
--protocol udp \
--port 24224 \
--cidr $CIDR

# Create the router ELB security group
aws ec2 create-security-group \
--group-name $ROUTER_ELB_SEC_GRP \
--description "Security Group for OpenShift Router ELB" \
--vpc-id $VPC_ID

ROUTER_ELB_SEC_GRP_ID=$(aws ec2 describe-security-groups \
--query SecurityGroups[].GroupId[] \
--filters Name=group-name,Values="$ROUTER_ELB_SEC_GRP" \
--output text)

aws ec2 create-tags \
--resources $ROUTER_ELB_SEC_GRP_ID \
--tags Key=Name,Value=$ROUTER_ELB_SEC_GRP

aws ec2 authorize-security-group-ingress \
--group-id $ROUTER_ELB_SEC_GRP_ID \
--protocol tcp \
--port 443 \
--cidr 0.0.0.0/0

aws ec2 authorize-security-group-ingress \
--group-id $ROUTER_ELB_SEC_GRP_ID \
--protocol tcp \
--port 80 \
--cidr 0.0.0.0/0

# Create the node security group and add inbound / outbound ports / traffic
aws ec2 create-security-group \
--group-name $NODES_SEC_GROUP \
--description "Security Group for OpenShift Node" \
--vpc-id $VPC_ID

NODE_SEC_GRP_ID=$(aws ec2 describe-security-groups \
--query SecurityGroups[].GroupId[] \
--filters Name=group-name,Values="$NODES_SEC_GROUP" \
--output text)

aws ec2 create-tags \
--resources $NODE_SEC_GRP_ID \
--tags Key=Name,Value=$NODES_SEC_GROUP

aws ec2 authorize-security-group-ingress \
--group-id $NODE_SEC_GRP_ID \
--protocol tcp \
--port 22 \
--source-group $BASTION_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $NODE_SEC_GRP_ID \
--protocol tcp \
--port 80 \
--source-group $ROUTER_ELB_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $NODE_SEC_GRP_ID \
--protocol tcp \
--port 443 \
--source-group $ROUTER_ELB_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $NODE_SEC_GRP_ID \
--protocol tcp \
--port 10250 \
--source-group $MASTER_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $NODE_SEC_GRP_ID \
--protocol tcp \
--port 10255 \
--source-group $MASTER_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $NODE_SEC_GRP_ID \
--protocol udp \
--port 10255 \
--source-group $MASTER_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $NODE_SEC_GRP_ID \
--protocol tcp \
--port 4789 \
--cidr $CIDR

# Create the application node security group
aws ec2 create-security-group \
--group-name $APP_NODES_SEC_GROUP \
--description "Security Group for OpenShift Application Nodes" \
--vpc-id $VPC_ID

APP_NODES_SEC_GRP_ID=$(aws ec2 describe-security-groups \
--query SecurityGroups[].GroupId[] \
--filters Name=group-name,Values="$APP_NODES_SEC_GROUP" \
--output text)

aws ec2 create-tags \
--resources $APP_NODES_SEC_GRP_ID \
--tags Key=Name,Value=$APP_NODES_SEC_GROUP

aws ec2 authorize-security-group-ingress \
--group-id $APP_NODES_SEC_GRP_ID \
--protocol tcp \
--port 10250 \
--source-group $MASTER_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $APP_NODES_SEC_GRP_ID \
--protocol tcp \
--port 10255 \
--source-group $MASTER_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $APP_NODES_SEC_GRP_ID \
--protocol udp \
--port 10255 \
--source-group $MASTER_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $APP_NODES_SEC_GRP_ID \
--protocol udp \
--port 4789 \
--source-group $MASTER_SEC_GRP_ID

aws ec2 authorize-security-group-ingress \
--group-id $APP_NODES_SEC_GRP_ID \
--protocol tcp \
--port 22 \
--source-group $BASTION_SEC_GRP_ID
